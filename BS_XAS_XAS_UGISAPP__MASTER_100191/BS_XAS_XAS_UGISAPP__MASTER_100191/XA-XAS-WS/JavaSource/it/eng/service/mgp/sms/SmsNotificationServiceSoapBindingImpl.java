/**
 * SmsNotificationServiceSoapBindingImpl.java
 *
 * This file was auto-generated from WSDL
 * by the IBM Web services WSDL2Java emitter.
 * cf190823.02 v62608112801
 */

package it.eng.service.mgp.sms;


import ie.omk.smpp.util.DefaultAlphabetEncoding;
import ie.omk.smpp.util.UCS2Encoding;
import it.usi.xframe.system.eservice.ServiceFactoryException;
import it.usi.xframe.xas.bfintf.IXasSendsmsServiceFacade;
import it.usi.xframe.xas.bfutil.ConstantsSms;
import it.usi.xframe.xas.bfutil.XASException;
import it.usi.xframe.xas.bfutil.XasServiceFactory;
import it.usi.xframe.xas.bfutil.data.DeliveryResponse;
import it.usi.xframe.xas.util.json.XConstants;
import it.usi.xframe.xas.wsutil.DeliveryReport;
import it.usi.xframe.xas.wsutil.ENUM_STATUS;
import it.usi.xframe.xas.wsutil.MobileOriginated;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.rmi.RemoteException;

import org.apache.log4j.MDC;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import eu.unicredit.xframe.slf.SmartLog;
import eu.unicredit.xframe.slf.UUID;

/**
 * Web Service implementation.
 * 
 * --- WARNING ---  WARNING --- WARNING --- WARNING --- WARNING --- WARNING --- WARNING --- WARNING --- WARNING ---
 * WHEN CREATING WEB SERVICE BOTTOM UP WITH
 * Web Services \ Create Web Service
 * --- WARNING --- WARNING --- WARNING --- WARNING --- WARNING --- WARNING --- WARNING --- WARNING --- WARNING ---
 * 
 * After the wizard completion re-setup the security authentication method for the SendSms & SendSms2 web services.
 * 
 * In WebContent \ WEB-INF \ webservices.xml \ Security Extensions 
 * \ Web Service Description Externsion [SendSmsService & SendSms2Service] \ Port Component Binding [SmsNotificationServicePort] 
 * \ Login Config \ Add [BasicAuth] (do not add the LTPA)
 * 
 * For Service it.eng.service.mgp.sms.SmsNotification add only BasicAuth.
 */	

/**
 * Implementation of the <i>SmsNotificationService</i> of Telecom provider.
 * 
 * <p>Implements the Delivery Report and Mobile Originated service for the Telecom provider WebService.</p>
 * <p>Use by extending it in the SmsNotificationServiceSoapBindingImpl class generated by the WebService generated
 * modify the class as the following row: </p>
 * <code>
 *   public class SmsNotificationServiceSoapBindingImpl <b>extends ServiceLifecycle</b> 
 * </code> 
 */
public class SmsNotificationServiceSoapBindingImpl implements it.eng.service.mgp.sms.SmsNotificationServicePortType {

	/**
     * 
     */
    private static final long serialVersionUID = 1L;
	private static Logger logger = LoggerFactory.getLogger(SmsNotificationServiceSoapBindingImpl.class);
	
	/**
	 * 
	 * @param sms
	 * @param sender - sender info bean (optional)
	 * @throws ServiceFactoryException
	 * @throws RemoteException
	 * @throws XASException
	 */
	public void newDeliveryStatus(it.eng.service.mgp.sms.MtDeliveryStatus arg1) throws RemoteException, java.rmi.RemoteException {
		MtDeliveryStatus mtDeliveryStatus = arg1;
//			NewDeliveryStatusResponse newDeliveryStatusResponse = null;
		IXasSendsmsServiceFacade facade;
		String myUUID = mtDeliveryStatus.getTxId() != null ? mtDeliveryStatus.getTxId().toString() : UUID.randomUUID().toString();;
        try {

			SmartLog sl = new SmartLog().logItCompact(ConstantsSms.MY_APPL_ID, ConstantsSms.MY_LOG_VER, "SmsNotification", myUUID, SmartLog.V_SCOPE_DEBUG)
										.logIt(SmartLog.K_METHOD, "newDeliveryStatus", SmartLog.K_PHASE, SmartLog.V_PHASE_ENTER).preset("default"); 

 			// Write to log the associated UUID and CRID if present
			String myCRID = (String) MDC.get(ConstantsSms.MY_CRID_KEY);
 			if (myCRID != null) {
 				logger.info(sl.logIt(SmartLog.K_STEP, "correlating", SmartLog.K_CRID, myCRID).getLogRow(true));
 			}

 			// If debug dump parameters
 			if (logger.isDebugEnabled()) { 
				logger.debug(sl.reload("default").logIt(SmartLog.K_STEP, "", SmartLog.K_PARAMS, XConstants.XSTREAMER.toXML(mtDeliveryStatus)).getLogRow());
			}
	        facade = XasServiceFactory.getInstance().getXasSendsmsServiceFacade();
        } catch (ServiceFactoryException e) {
	        throw new RemoteException("ServiceFactoryException", e);
        }

        try{ // UUID retrieved from SOAP Header
			DeliveryReport deliveryReport = new DeliveryReport();
			deliveryReport.setProviderDate(mtDeliveryStatus.getDate());
			deliveryReport.setUuid(mtDeliveryStatus.getMsgId());
			deliveryReport.setSmsIds(new String[] {mtDeliveryStatus.getSmsId()});
			deliveryReport.setPhoneNumber(mtDeliveryStatus.getDestAddr());
			deliveryReport.setDeliveryDate(mtDeliveryStatus.getDeliveryDate());
			deliveryReport.setStatus(ENUM_STATUS.fromValue(mtDeliveryStatus.getStatus().toString()));

			DeliveryResponse deliveryResponse = facade.receiveTelecomDeliveryReport(deliveryReport);	// at the moment 'sender' is ignored
			if (! (ConstantsSms.XAS00000I_CODE.equals(deliveryResponse.getCode()) 
			    || ConstantsSms.XAS06080I_CODE.equals(deliveryResponse.getCode())
			    || ConstantsSms.XAS06082E_CODE.equals(deliveryResponse.getCode())
			    )) { 
				// XAS00000I, XAS00080I, XAS0082E - Do not retry. For other return code do a retry. 
				throw new RemoteException(deliveryResponse.getCode() + " " + deliveryResponse.getMessage() + " FORCED RETRY"); 
			}
		} finally {
			XasServiceFactory.getInstance().dispose(facade);
		}
//			return newDeliveryStatusResponse;
	}
 
	public void newMessage(it.eng.service.mgp.sms.MoMessage arg1) throws java.rmi.RemoteException {
		MoMessage moMessage = arg1;
//			NewDeliveryStatusResponse newDeliveryStatusResponse = null;
		IXasSendsmsServiceFacade facade;
		String myUUID = moMessage.getTxId() != null ? moMessage.getTxId().toString() : UUID.randomUUID().toString();;
        try {

			SmartLog sl = new SmartLog().logItCompact(ConstantsSms.MY_APPL_ID, ConstantsSms.MY_LOG_VER, "SmsNotification", myUUID, SmartLog.V_SCOPE_DEBUG)
										.logIt(SmartLog.K_METHOD, "newMessage", SmartLog.K_PHASE, SmartLog.V_PHASE_ENTER, ConstantsSms.K_UUID_TYPE, myUUID).preset("default"); 

 			// Write to log the associated UUID and CRID if present
			String myCRID = (String) MDC.get(ConstantsSms.MY_CRID_KEY);
 			if (myCRID != null) {
 				logger.info(sl.logIt(SmartLog.K_STEP, "correlating", SmartLog.K_CRID, myCRID).getLogRow(true));
 			}

 			// If debug dump parameters
 			if (logger.isDebugEnabled()) { 
				logger.debug(sl.reload("default").logIt(SmartLog.K_STEP, "", SmartLog.K_PARAMS, XConstants.XSTREAMER.toXML(moMessage)).getLogRow());
			}
 			
        	facade = XasServiceFactory.getInstance().getXasSendsmsServiceFacade();
        } catch (ServiceFactoryException e) { 
	        throw new RemoteException("ServiceFactoryException", e);
        }

        try{ // UUID retrieved from SOAP Header
 			MobileOriginated mobileOriginated = new MobileOriginated();
 			mobileOriginated.setMoDate(moMessage.getDate());
			mobileOriginated.setSmsIds(new String[] {moMessage.getSmsId()});
	 		mobileOriginated.setProviderDate(moMessage.getSmscDate());
			mobileOriginated.setPhoneNumber(moMessage.getSrcAddr());
			mobileOriginated.setMoDestinator(moMessage.getDestAddr());
			mobileOriginated.setUuid(moMessage.getTxId());
			
			if (GsmEncoding.GSM7.equals(moMessage.getPayloadUddc())) {
                mobileOriginated.setMsg((new DefaultAlphabetEncoding()).decodeString(moMessage.getPayloadUd()));
			} else if (GsmEncoding.UCS2.equals(moMessage.getPayloadUddc())) {
				try {
					mobileOriginated.setMsg((new UCS2Encoding()).decodeString(moMessage.getPayloadUd()));
                } catch (UnsupportedEncodingException e) {
                	StringWriter errors = new StringWriter();
                	e.printStackTrace(new PrintWriter(errors));
     				throw new RuntimeException("UCS2 Decoding", e);
                 }	
			}
			

			DeliveryResponse deliveryResponse = facade.receiveTelecomMobileOriginated(mobileOriginated);	// at the moment 'sender' is ignored
			if (! (ConstantsSms.XAS00000I_CODE.equals(deliveryResponse.getCode()) 
			    || ConstantsSms.XAS06080I_CODE.equals(deliveryResponse.getCode())
			    || ConstantsSms.XAS06082E_CODE.equals(deliveryResponse.getCode())
			    )) { 
				// XAS00000I, XAS00080I, XAS0082E - Do not retry. For other return code do a retry. 
				throw new RemoteException(deliveryResponse.getCode() + " " + deliveryResponse.getMessage() + " FORCED RETRY"); 
			}
		} finally {
			XasServiceFactory.getInstance().dispose(facade);
		}
//			return newDeliveryStatusResponse;
		}


}
